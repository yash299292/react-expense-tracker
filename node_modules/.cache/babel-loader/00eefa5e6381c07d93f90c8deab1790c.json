{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = group;\nexports.flatGroup = flatGroup;\nexports.flatRollup = flatRollup;\nexports.groups = groups;\nexports.index = index;\nexports.indexes = indexes;\nexports.rollup = rollup;\nexports.rollups = rollups;\n\nvar _index = require(\"../../../lib-vendor/internmap/src/index.js\");\n\nvar _identity = _interopRequireDefault(require(\"./identity.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction group(values, ...keys) {\n  return nest(values, _identity.default, _identity.default, keys);\n}\n\nfunction groups(values, ...keys) {\n  return nest(values, Array.from, _identity.default, keys);\n}\n\nfunction flatten(groups, keys) {\n  for (let i = 1, n = keys.length; i < n; ++i) {\n    groups = groups.flatMap(g => g.pop().map(([key, value]) => [...g, key, value]));\n  }\n\n  return groups;\n}\n\nfunction flatGroup(values, ...keys) {\n  return flatten(groups(values, ...keys), keys);\n}\n\nfunction flatRollup(values, reduce, ...keys) {\n  return flatten(rollups(values, reduce, ...keys), keys);\n}\n\nfunction rollup(values, reduce, ...keys) {\n  return nest(values, _identity.default, reduce, keys);\n}\n\nfunction rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nfunction index(values, ...keys) {\n  return nest(values, _identity.default, unique, keys);\n}\n\nfunction indexes(values, ...keys) {\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new _index.InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);else groups.set(key, [value]);\n    }\n\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n\n    return map(groups);\n  }(values, 0);\n}","map":{"version":3,"sources":["/Users/nonijoysar/Desktop/react-expense-tracker/node_modules/victory-vendor/lib-vendor/d3-array/src/group.js"],"names":["Object","defineProperty","exports","value","default","group","flatGroup","flatRollup","groups","index","indexes","rollup","rollups","_index","require","_identity","_interopRequireDefault","obj","__esModule","values","keys","nest","Array","from","flatten","i","n","length","flatMap","g","pop","map","key","reduce","unique","Error","regroup","InternMap","keyof","get","push","set"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = group;\nexports.flatGroup = flatGroup;\nexports.flatRollup = flatRollup;\nexports.groups = groups;\nexports.index = index;\nexports.indexes = indexes;\nexports.rollup = rollup;\nexports.rollups = rollups;\n\nvar _index = require(\"../../../lib-vendor/internmap/src/index.js\");\n\nvar _identity = _interopRequireDefault(require(\"./identity.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction group(values, ...keys) {\n  return nest(values, _identity.default, _identity.default, keys);\n}\n\nfunction groups(values, ...keys) {\n  return nest(values, Array.from, _identity.default, keys);\n}\n\nfunction flatten(groups, keys) {\n  for (let i = 1, n = keys.length; i < n; ++i) {\n    groups = groups.flatMap(g => g.pop().map(([key, value]) => [...g, key, value]));\n  }\n\n  return groups;\n}\n\nfunction flatGroup(values, ...keys) {\n  return flatten(groups(values, ...keys), keys);\n}\n\nfunction flatRollup(values, reduce, ...keys) {\n  return flatten(rollups(values, reduce, ...keys), keys);\n}\n\nfunction rollup(values, reduce, ...keys) {\n  return nest(values, _identity.default, reduce, keys);\n}\n\nfunction rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nfunction index(values, ...keys) {\n  return nest(values, _identity.default, unique, keys);\n}\n\nfunction indexes(values, ...keys) {\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new _index.InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);else groups.set(key, [value]);\n    }\n\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n\n    return map(groups);\n  }(values, 0);\n}"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormatSpecifier = FormatSpecifier;\nexports.default = formatSpecifier; // [[fill]align][sign][symbol][0][width][,][.precision][~][type]\n\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nfunction formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function () {\n  return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (this.width === undefined ? \"\" : Math.max(1, this.width | 0)) + (this.comma ? \",\" : \"\") + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0)) + (this.trim ? \"~\" : \"\") + this.type;\n};","map":{"version":3,"sources":["/Users/nonijoysar/Desktop/react-expense-tracker/node_modules/victory-vendor/lib-vendor/d3-format/src/formatSpecifier.js"],"names":["Object","defineProperty","exports","value","FormatSpecifier","default","formatSpecifier","re","specifier","match","exec","Error","fill","align","sign","symbol","zero","width","comma","precision","slice","trim","type","prototype","undefined","toString","Math","max"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormatSpecifier = FormatSpecifier;\nexports.default = formatSpecifier;\n// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nfunction formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function () {\n  return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (this.width === undefined ? \"\" : Math.max(1, this.width | 0)) + (this.comma ? \",\" : \"\") + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0)) + (this.trim ? \"~\" : \"\") + this.type;\n};"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = reduce;\n\nfunction reduce(values, reducer, value) {\n  if (typeof reducer !== \"function\") throw new TypeError(\"reducer is not a function\");\n  const iterator = values[Symbol.iterator]();\n  let done,\n      next,\n      index = -1;\n\n  if (arguments.length < 3) {\n    ({\n      done,\n      value\n    } = iterator.next());\n    if (done) return;\n    ++index;\n  }\n\n  while (({\n    done,\n    value: next\n  } = iterator.next()), !done) {\n    value = reducer(value, next, ++index, values);\n  }\n\n  return value;\n}","map":{"version":3,"sources":["/Users/nonijoysar/Desktop/react-expense-tracker/node_modules/victory-vendor/lib-vendor/d3-array/src/reduce.js"],"names":["Object","defineProperty","exports","value","default","reduce","values","reducer","TypeError","iterator","Symbol","done","next","index","arguments","length"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AAEA,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,OAAxB,EAAiCJ,KAAjC,EAAwC;AACtC,MAAI,OAAOI,OAAP,KAAmB,UAAvB,EAAmC,MAAM,IAAIC,SAAJ,CAAc,2BAAd,CAAN;AACnC,QAAMC,QAAQ,GAAGH,MAAM,CAACI,MAAM,CAACD,QAAR,CAAN,EAAjB;AACA,MAAIE,IAAJ;AAAA,MACIC,IADJ;AAAA,MAEIC,KAAK,GAAG,CAAC,CAFb;;AAIA,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,KAAC;AACCJ,MAAAA,IADD;AAECR,MAAAA;AAFD,QAGGM,QAAQ,CAACG,IAAT,EAHJ;AAIA,QAAID,IAAJ,EAAU;AACV,MAAEE,KAAF;AACD;;AAED,SAAO,CAAC;AACNF,IAAAA,IADM;AAENR,IAAAA,KAAK,EAAES;AAFD,MAGJH,QAAQ,CAACG,IAAT,EAHG,GAGe,CAACD,IAHvB,EAG6B;AAC3BR,IAAAA,KAAK,GAAGI,OAAO,CAACJ,KAAD,EAAQS,IAAR,EAAc,EAAEC,KAAhB,EAAuBP,MAAvB,CAAf;AACD;;AAED,SAAOH,KAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = reduce;\n\nfunction reduce(values, reducer, value) {\n  if (typeof reducer !== \"function\") throw new TypeError(\"reducer is not a function\");\n  const iterator = values[Symbol.iterator]();\n  let done,\n      next,\n      index = -1;\n\n  if (arguments.length < 3) {\n    ({\n      done,\n      value\n    } = iterator.next());\n    if (done) return;\n    ++index;\n  }\n\n  while (({\n    done,\n    value: next\n  } = iterator.next()), !done) {\n    value = reducer(value, next, ++index, values);\n  }\n\n  return value;\n}"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _exponent = _interopRequireDefault(require(\"./exponent.js\"));\n\nvar _formatGroup = _interopRequireDefault(require(\"./formatGroup.js\"));\n\nvar _formatNumerals = _interopRequireDefault(require(\"./formatNumerals.js\"));\n\nvar _formatSpecifier = _interopRequireDefault(require(\"./formatSpecifier.js\"));\n\nvar _formatTrim = _interopRequireDefault(require(\"./formatTrim.js\"));\n\nvar _formatTypes = _interopRequireDefault(require(\"./formatTypes.js\"));\n\nvar _formatPrefixAuto = require(\"./formatPrefixAuto.js\");\n\nvar _identity = _interopRequireDefault(require(\"./identity.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n\nfunction _default(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = (0, _formatSpecifier.default)(specifier);\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type; // The \"n\" type is an alias for \",g\".\n\n    if (type === \"n\") comma = true, type = \"g\"; // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = \"g\"; // If zero fill is specified, padding goes after sign and before digits.\n\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\"; // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\"; // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n\n    var formatType = _formatTypes.default[type],\n        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n\n    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i,\n          n,\n          c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n\n        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.\n\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.\n\n        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false; // Compute the prefix and suffix.\n\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\"); // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      } // If the fill character is not \"0\", grouping is applied before padding.\n\n\n      if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\"; // If the fill character is \"0\", grouping is applied after padding.\n\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\"; // Reconstruct the final output based on the desired alignment.\n\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function () {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}","map":{"version":3,"sources":["/Users/nonijoysar/Desktop/react-expense-tracker/node_modules/victory-vendor/lib-vendor/d3-format/src/locale.js"],"names":["Object","defineProperty","exports","value","default","_default","_exponent","_interopRequireDefault","require","_formatGroup","_formatNumerals","_formatSpecifier","_formatTrim","_formatTypes","_formatPrefixAuto","_identity","obj","__esModule","map","Array","prototype","prefixes","locale","group","grouping","undefined","thousands","call","Number","currencyPrefix","currency","currencySuffix","decimal","numerals","String","percent","minus","nan","newFormat","specifier","fill","align","sign","symbol","zero","width","comma","precision","trim","type","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","Math","max","min","format","valuePrefix","valueSuffix","i","n","c","valueNegative","isNaN","abs","prefixExponent","length","charCodeAt","slice","Infinity","padding","join","toString","formatPrefix","f","e","floor","k","pow"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _exponent = _interopRequireDefault(require(\"./exponent.js\"));\n\nvar _formatGroup = _interopRequireDefault(require(\"./formatGroup.js\"));\n\nvar _formatNumerals = _interopRequireDefault(require(\"./formatNumerals.js\"));\n\nvar _formatSpecifier = _interopRequireDefault(require(\"./formatSpecifier.js\"));\n\nvar _formatTrim = _interopRequireDefault(require(\"./formatTrim.js\"));\n\nvar _formatTypes = _interopRequireDefault(require(\"./formatTypes.js\"));\n\nvar _formatPrefixAuto = require(\"./formatPrefixAuto.js\");\n\nvar _identity = _interopRequireDefault(require(\"./identity.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n\nfunction _default(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = (0, _formatSpecifier.default)(specifier);\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type; // The \"n\" type is an alias for \",g\".\n\n    if (type === \"n\") comma = true, type = \"g\"; // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = \"g\"; // If zero fill is specified, padding goes after sign and before digits.\n\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\"; // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\"; // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n\n    var formatType = _formatTypes.default[type],\n        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n\n    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i,\n          n,\n          c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n\n        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.\n\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.\n\n        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false; // Compute the prefix and suffix.\n\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\"); // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      } // If the fill character is not \"0\", grouping is applied before padding.\n\n\n      if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\"; // If the fill character is \"0\", grouping is applied after padding.\n\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\"; // Reconstruct the final output based on the desired alignment.\n\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function () {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}"]},"metadata":{},"sourceType":"script"}
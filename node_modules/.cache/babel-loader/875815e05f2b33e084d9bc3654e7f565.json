{"ast":null,"code":"/*!\n * Chart.js v4.4.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n\n        this._notify(chart, anims, date, 'complete');\n\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n\n    return anims;\n  }\n\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n\n    this._getAnims(chart).items.push(...items);\n  }\n\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  start(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims) {\n      return;\n    }\n\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  stop(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.items.length) {\n      return;\n    }\n\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n\n    anims.items = [];\n\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n\n}\n\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n\n};\n\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n\n    if (!this._active) {\n      this._target[prop] = to;\n\n      this._notify(true);\n\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n\n}\n\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n\n      if (!isObject(cfg)) {\n        return;\n      }\n\n      const resolved = {};\n\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n\n    return animations;\n  }\n\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n\n    return animations;\n  }\n\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n\n  let options = target.options;\n\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n\n      break;\n    }\n\n    otherValue = stack.values[datasetIndex];\n\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n\n    delete stacks[axis][datasetIndex];\n\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\n\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\n\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\n\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  _destroy() {\n    const meta = this._cachedMeta;\n\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    this._resyncElements(resetNewElements);\n\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n\n          prev = cur;\n        }\n      }\n\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n\n    return parsed;\n  }\n\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n\n    const otherScale = this._getOtherScale(scale);\n\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n\n      if (sorted) {\n        break;\n      }\n    }\n\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n\n    return values;\n  }\n\n  getMaxOverflow() {\n    return false;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  update(mode) {}\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n\n      if (element.hidden) {\n        continue;\n      }\n\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n\n    const context = () => this.getContext(index, active, mode);\n\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n\n    if (cached) {\n      return cached;\n    }\n\n    let options;\n\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n\n    const animations = new Animations(chart, options && options.animations);\n\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = arr => {\n      arr.length += count;\n\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {}\n\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n\n    meta.data.splice(start, count);\n  }\n\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n\n    const newCount = arguments.length - 2;\n\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n\n}\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n\n  return scale._cache.$bar;\n}\n\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\n\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {\n  inflateAmount\n}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\n\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n\n    return parsed;\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  getMaxOverflow() {\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n\n    const ruler = this._getRuler();\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n\n    return max > 0 && max;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n\n    const radius = values.radius;\n\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\n\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n\n        const rotation = controller._getRotation();\n\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n\n    const chartWeight = this._getRingWeight(this.index);\n\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n\n    const circumference = this._getCircumference();\n\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    let startAngle = this._getRotation();\n\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n\n    return max;\n  }\n\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n\n}\n\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n\n}\n\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n\n}\n\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\n\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n}\n\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\n\n\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  options;\n\n  constructor(options) {\n    this.options = options || {};\n  } // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  init() {}\n\n  formats() {\n    return abstract();\n  }\n\n  parse() {\n    return abstract();\n  }\n\n  format() {\n    return abstract();\n  }\n\n  add() {\n    return abstract();\n  }\n\n  diff() {\n    return abstract();\n  }\n\n  startOf() {\n    return abstract();\n  }\n\n  endOf() {\n    return abstract();\n  }\n\n}\n\nvar adapters = {\n  _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\n\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n\n  return items;\n}\n\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n\n      return items;\n    },\n\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n\n  return stacks;\n}\n\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n\n  releaseContext(context) {\n    return false;\n  }\n\n  addEventListener(chart, type, listener) {}\n\n  removeEventListener(chart, type, listener) {}\n\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  isAttached(canvas) {\n    return true;\n  }\n\n  updateConfig(config) {}\n\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n\n  const container = canvas && _getParentNode(canvas);\n\n  if (!container) {\n    return;\n  }\n\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\n\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  releaseContext(context) {\n    const canvas = context.canvas;\n\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n\n    return !!(container && container.isConnected);\n  }\n\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n\n  return DomPlatform;\n}\n\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  x;\n  y;\n  active = false;\n  options;\n  $animations;\n\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  getProps(props, final) {\n    const anims = this.$animations;\n\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n\n}\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n\n  const tickLength = scale._tickSize();\n\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n\n  return Math.max(spacing, 1);\n}\n\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}\n\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n\n  return diff;\n}\n\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n\n  return result;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n\n    lineValue += validIndex < index ? offset : -offset;\n\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n\n  return lineValue;\n}\n\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\n\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  parse(raw, index) {\n    return raw;\n  }\n\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  getTicks() {\n    return this.ticks;\n  }\n\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n\n    return items;\n  }\n\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n\n  determineDataLimits() {}\n\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n\n  buildTicks() {\n    return [];\n  }\n\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n\n  afterAutoSkip() {}\n\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n\n    const display = this._isVisible();\n\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n\n  getLabelForValue(value) {\n    return value;\n  }\n\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n\n  getValueForPixel(pixel) {}\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n\n        if (mirror) {\n          textOffset *= -1;\n        }\n\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n\n          case 'bottom':\n            top -= height;\n            break;\n        }\n\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n\n          case 'right':\n            left -= width;\n            break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n\n    const labelSizes = this._getLabelSizes();\n\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {\n      textAlign,\n      x\n    };\n  }\n\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n\n    return 0;\n  }\n\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n\n    if (!axisWidth) {\n      return;\n    }\n\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  get(id) {\n    return this.items[id];\n  }\n\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n\n    return this.plugins;\n  }\n\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n\n    return item;\n  }\n\n}\n\nvar registry = /* #__PURE__ */new Registry();\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n\n      this._notify(this._init, chart, 'uninstall');\n    }\n\n    return result;\n  }\n\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n\n}\n\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {\n    plugins,\n    localIds\n  };\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n\n  if (options === true) {\n    return {};\n  }\n\n  return options;\n}\n\nfunction createDescriptors(chart, {\n  plugins,\n  localIds\n}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n\n    if (opts === null) {\n      continue;\n    }\n\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {\n  plugin,\n  local\n}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nfunction determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n\n    if (axis) {\n      return axis;\n    }\n  }\n\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n\n    this._resolverCache.clear();\n  }\n\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n\n    let cache = _scopeCache.get(mainScope);\n\n    if (!cache || resetCache) {\n      cache = new Map();\n\n      _scopeCache.set(mainScope, cache);\n    }\n\n    return cache;\n  }\n\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n\n    const cache = this._cachedScopes(mainScope, resetCache);\n\n    const cached = cache.get(keyLists);\n\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n\n    return array;\n  }\n\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n\n    return result;\n  }\n\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n\n  return cached;\n}\n\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar version = \"4.4.0\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\n\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\n\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n\n  return item;\n}\n\nconst instances = {};\n\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const intKey = +key;\n\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n\n  if (isClick) {\n    return lastEvent;\n  }\n\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n\n  return chartArea;\n}\n\nclass Chart {\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n\n      metasets.splice(numData, numMeta - numData);\n    }\n\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n\n        meta = this.getDatasetMeta(i);\n      }\n\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n\n    return newControllers;\n  }\n\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  reset() {\n    this._resetElements();\n\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n\n    this._checkEventBindings();\n\n    this._updateHiddenIndices();\n\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n\n    this._updateLayout(minPadding);\n\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    const {\n      _active,\n      _lastEvent\n    } = this;\n\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n\n    const changeSet = makeSet(0);\n\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n\n      if (box.configure) {\n        box.configure();\n      }\n\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n\n  draw() {\n    let i;\n\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n\n      this._resize(width, height);\n\n      this._resizeBeforeDraw = null;\n    }\n\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const layers = this._layers;\n\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n\n    this._stop();\n\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  bindEvents() {\n    this.bindUserEvents();\n\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, type => _add(type, listener));\n  }\n\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached;\n\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      this._stop();\n\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n\n    const isClick = _isClickEvent(e);\n\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed || replay) {\n      this._active = active;\n\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n\n}\n\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius; // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\n\n\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2); // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\n\n\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\n\n\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle); // The corner segment from point 2 to point 3\n\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    } // The line from point 3 to point 4\n\n\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y); // The corner segment from point 4 to point 5\n\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    } // The inner arc from point 5 to point b to point 6\n\n\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true); // The corner segment from point 6 to point 7\n\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    } // The line from point 7 to point 8\n\n\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y); // The corner segment from point 8 to point 1\n\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset\n  } = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash'\n  };\n  circumference;\n  endAngle;\n  fullCircles;\n  innerRadius;\n  outerRadius;\n  pixelMargin;\n  startAngle;\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return betweenAngles && withinRadius;\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n\n}\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n\n    lastY = y;\n  }\n\n  drawX();\n}\n\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n\n  if (!path) {\n    path = line._path = new Path2D();\n\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n\n    const _interpolate = _getInterpolationMethod(options);\n\n    let i, ilen;\n\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n\n    return result.length === 1 ? result[0] : result;\n  }\n\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  path(ctx, start, count) {\n    const segments = this.segments;\n\n    const segmentMethod = _getSegmentMethod(this);\n\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n\n    return !!loop;\n  }\n\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\n\nclass PointElement extends Element {\n  static id = 'point';\n  parsed;\n  skip;\n  stop;\n  /**\n  * @type {any}\n  */\n\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx, area) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {}; // @ts-expect-error Fallbacks should never be hit in practice\n\n    return options.radius + options.hitRadius;\n  }\n\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n]; // Border colors with 50% transparency\n\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\n\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {\n    start,\n    count\n  };\n}\n\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n\n      if (chart.options.parsing) {\n        return;\n      }\n\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n\n      let decimated;\n\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n\n  return parts;\n}\n\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n\n  return {\n    property,\n    start,\n    end\n  };\n}\n\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({\n    start,\n    end\n  }) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\n\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n\n  return pixel;\n}\n\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n\n  return value;\n}\n\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\n\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n\n    if (meta.index === index) {\n      break;\n    }\n\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n\n  return below;\n}\n\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n\n    if (!point || first && last) {\n      continue;\n    }\n\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n\n      if (!last) {\n        break;\n      }\n    }\n  }\n\n  points.push(...postponed);\n}\n\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n\n  return {\n    first,\n    last,\n    point\n  };\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n\n}\n\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n\n  return computeLinearBoundary(source);\n}\n\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n\n  const value = _getTargetValue(fill, scale, start);\n\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n\n  const segments = _segments(line, target, property);\n\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n\n    if (this.isHorizontal()) {\n      let row = 0;\n\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    const isHorizontal = this.isHorizontal();\n\n    const titleHeight = this._computeTitleHeight();\n\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  handleEvent(e) {\n    const opts = this.options;\n\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n\n  return false;\n}\n\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n\n      maxWidth = bottom - top;\n    }\n\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n\n};\n\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n\n  return str;\n}\n\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  let widthPadding = 0;\n\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\n\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n\n  return y;\n}\n\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  beforeTitle: noop,\n\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n\n    const value = tooltipItem.formattedValue;\n\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n\n    return label;\n  },\n\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nclass Tooltip extends Element {\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n\n      y3 = y1;\n    }\n\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n\n      if (!position) {\n        return;\n      }\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    const positionChanged = this._positionChanged(active, e);\n\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n\n}\n\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', { ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n\n  return value;\n}\n\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n\n    if (added.length) {\n      const labels = this.getLabels();\n\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n\n      this._addedLabels = [];\n    }\n\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n\n      if (niceMin < min) {\n        j++;\n      }\n\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n\n    ticks.push({\n      value: tickValue\n    });\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {\n  horizontal,\n  minRotation\n}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n}\n\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n\n    const tickFont = this._resolveTickFontOptions(0);\n\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n\n}\n\nconst log10Floor = v => Math.floor(log10(v));\n\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n\n  return Math.min(rangeExp, log10Floor(min));\n}\n\nfunction generateTicks(generationOptions, {\n  min,\n  max\n}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\n\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n\n}\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n\n    if (!item.visible) {\n      continue;\n    }\n\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n\n      callback(label) {\n        return label;\n      },\n\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  drawBorder() {}\n\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n\n  drawTitle() {}\n\n}\n\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n  return a - b;\n}\n\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n\n  return ticks;\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n\n    return {\n      min,\n      max\n    };\n  }\n\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n\n    const size = this._getLabelSize(exampleLabel);\n\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return this._cache.data = this.normalize(timestamps);\n  }\n\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n\n}\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  }\n\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"sources":["/Users/nonijoysar/Desktop/react-expense-tracker/node_modules/chart.js/dist/chart.js"],"names":["r","requestAnimFrame","a","resolve","e","effects","c","color","i","isObject","d","defaults","b","isArray","v","valueOrDefault","u","unlistenArrayEvents","l","listenArrayEvents","f","resolveObjectKey","g","isNumberFinite","h","defined","s","sign","j","createContext","k","isNullOrUndef","_","_arrayUnique","t","toRadians","m","toPercentage","n","toDimension","T","TAU","o","formatNumber","p","_angleBetween","H","HALF_PI","P","PI","q","_getStartAndCountOfVisiblePoints","w","_scaleRangesChanged","x","isNumber","y","_parseObjectDataRadialScale","z","getRelativePosition","A","_rlookupByKey","B","_lookupByKey","C","_isPointInArea","D","getAngleFromPoint","E","toPadding","F","each","G","getMaximumSize","I","_getParentNode","J","readUsedSize","K","supportsEventListenerOptions","L","throttled","M","_isDomSupported","N","_factorize","O","finiteOrDefault","Q","callback","R","_addGrace","S","_limitValue","U","toDegrees","V","_measureText","W","_int16Range","X","_alignPixel","Y","clipArea","Z","renderText","$","unclipArea","a0","toFont","a1","_toLeftRightCenter","a2","_alignStartEnd","a3","overrides","a4","merge","a5","_capitalize","a6","descriptors","a7","isFunction","a8","_attachContext","a9","_createResolver","aa","_descriptors","ab","mergeIf","ac","uid","ad","debounce","ae","retinaScale","af","clearCanvas","ag","setsEqual","ah","_elementsEqual","ai","_isClickEvent","aj","_isBetween","ak","_readValueToProps","al","_updateBezierControlPoints","am","_computeSegments","an","_boundSegments","ao","_steppedInterpolation","ap","_bezierInterpolation","aq","_pointInLine","ar","_steppedLineTo","as","_bezierCurveTo","at","drawPoint","au","addRoundedRectPath","av","toTRBL","aw","toTRBLCorners","ax","_boundSegment","ay","_normalizeAngle","az","getRtlAdapter","aA","overrideTextDirection","aB","_textX","aC","restoreTextDirection","aD","drawPointLegend","aE","distanceBetweenPoints","aF","noop","aG","_setMinAndMaxByKey","aH","niceNum","aI","almostWhole","aJ","almostEquals","aK","_decimalPlaces","aL","Ticks","aM","log10","aN","_longestText","aO","_filterBetween","aP","_lookup","Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","call","window","_update","Date","now","remaining","running","items","length","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","_fn","_easing","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","animation","animatedProps","getOwnPropertyNames","key","option","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","top","right","bottom","left","toClip","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","isExtensible","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","sort","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","setInflateAmount","inflateAmount","BarController","grouped","numbers","_index_","offset","grid","_value_","beginAtZero","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","calcMin","maxX","maxY","minX","minY","DoughnutController","animateRotate","animateScale","spacing","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_datasetIndex","_decimated","segment","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","controllers","__proto__","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","inRange","getNearestRadialItems","getProps","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","removeBox","layoutItem","minPadding","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","displayHeight","eventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","lines","lineHeight","createScaleContext","createTickContext","titleAlign","titleArgs","titleX","titleY","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","title","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","valueAt","idx","pixel","decimal","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","subResolver","descriptorDefaults","resolverCache","hasFunction","isScriptable","isIndexable","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","maintainAspectRatio","responsive","bindEvents","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","parseBorderRadius$1","angleDelta","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","tension","cubicInterpolationMode","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","interpolate","_interpolate","interpolated","inRange$1","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","parseBorderRadius","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","containsColorsDefinition","plugin_colors","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","fillSource","_getEdge","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","yBoxTop","xBoxLeft","fillText","strikethrough","textDirection","textWidth","setWidth","realX","fontLineHeight","calculateLegendItemHeight","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","eventPosition","nearestElement","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","Colors","Decimation","Filler","SubTitle","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","LinearScale","formatters","numeric","log10Floor","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables","_adapters"],"mappings":"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","sourcesContent":["/*!\n * Chart.js v4.4.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.0\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"]},"metadata":{},"sourceType":"module"}